name: Publish and deploy the Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  build-and-publish:
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write # Crucial for pushing Docker images and Helm charts to GHCR

    outputs:
      chart_name: ${{ steps.chart.outputs.name }}
      # Now outputting the full dynamically generated chart version
      full_chart_version: ${{ steps.chart_version_output.outputs.full_version }} # ADDED: Output for the dynamically generated chart version
      image_tag: "latest" # Assuming 'latest' tag is always pushed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5 # Using the recommended action
        with:
          context: . # Path to the build context, usually where your Dockerfile is.
                     # Assumes your Dockerfile is in the root of the repository.
                     # If it's in a subfolder (e.g., ./app), change to './app'
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/quake-watch-app:latest
          # Optional: Add caching for faster builds
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Extract Chart Metadata and Generate Version
        id: chart_version_output # CHANGED: ID to more accurately reflect output
        run: |
          # Find the *first* Chart.yaml in the ./k8s/ directory structure.
          CHART_YAML_PATH=$(find ./k8s -name Chart.yaml | head -n 1) 
          
          if [ -z "$CHART_YAML_PATH" ]; then
            echo "Error: No Chart.yaml found in ./k8s/ directory."
            exit 1
          fi
          
          # Extract base version from Chart.yaml
          BASE_CHART_VERSION=$(grep '^version:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Base chart version detected: $BASE_CHART_VERSION"

          # GENERATED: A dynamic version tag for the Helm chart based on the workflow run number.
          # This ensures a unique OCI chart version for each successful build.
          FULL_CHART_VERSION="${BASE_CHART_VERSION}-build-${{ github.run_number }}"
          echo "Generated full chart version for OCI: $FULL_CHART_VERSION"
          echo "full_version=$FULL_CHART_VERSION" >> "$GITHUB_OUTPUT" # Output for current job steps and for job output
          
          # Extract name from Chart.yaml (still needed for package/push)
          CHART_NAME=$(grep '^name:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart name detected: $CHART_NAME"
          echo "name=$CHART_NAME" >> "$GITHUB_OUTPUT" # Output for current job steps

          # Extract chart directory path (e.g., quake-watch-app-chart from k8s/quake-watch-app-chart/Chart.yaml)
          CHART_DIRECTORY=$(dirname "$CHART_YAML_PATH" | xargs basename)
          echo "Chart directory name: $CHART_DIRECTORY"
          echo "chart_directory=$CHART_DIRECTORY" >> "$GITHUB_OUTPUT" # Output for current job steps

      # Removed: Upload Chart Version Artifact step (no longer needed with job output)

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.0

      - name: Package & Push Helm Chart to GHCR OCI
        run: |
          # Use the dynamically generated full chart version for packaging
          CHART_DIR="./k8s/${{ steps.chart_version_output.outputs.chart_directory }}" 
          CHART_PACKAGE=$(helm package "$CHART_DIR" --destination . --version "${{ steps.chart_version_output.outputs.full_version }}" | awk '{print $NF}') # ADDED --version flag
          echo "Packaged chart: $CHART_PACKAGE"
          GHCR_OCI_TARGET="oci://ghcr.io/${{ github.repository_owner }}/${{ steps.chart_version_output.outputs.name }}"
          echo "Pushing Helm chart to GHCR OCI Repository: $GHCR_OCI_TARGET"
          helm push "$CHART_PACKAGE" "$GHCR_OCI_TARGET" --debug

  deploy:
    runs-on: self-hosted
    needs: build-and-publish # Crucial to get outputs from the 'build-and-publish' job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Removed: Download Chart Version Artifact step

      - name: Set up Kubeconfig for K3D Cluster
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      # The 'Install ArgoCD CLI' step has been removed based on your request.
      # The workflow will now rely on ArgoCD CLI being pre-installed on the self-hosted runner.

      - name: Get ArgoCD Admin Password
        id: get_argocd_password
        run: |
          ARGO_CD_INITIAL_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "Retrieved ArgoCD Admin Password."
          echo "argocd_password=$ARGO_CD_INITIAL_PASSWORD" >> "$GITHUB_OUTPUT"

      - name: Log in to ArgoCD
        run: |
          argocd login ${{ secrets.ARGO_CD_SERVER }} \
            --username admin \
            --password ${{ steps.get_argocd_password.outputs.argocd_password }} \
            --insecure

      # --- START: Changes to reliably sync ArgoCD with OCI chart version ---
      - name: Update ArgoCD Application with New Chart Version and Sync
        run: |
          APP_NAME="quake-watch-app-gitops" # Directly use the application name

          # Get the full chart version from the build-and-publish job outputs
          NEW_CHART_VERSION="${{ needs.build-and-publish.outputs.full_chart_version }}"
          CHART_NAME="${{ needs.build-and-publish.outputs.chart_name }}" # Get chart name from build job

          echo "Updating ArgoCD application '${APP_NAME}' targetRevision to OCI chart version: ${NEW_CHART_VERSION}"
          # Patch the application to explicitly point to the new OCI chart version
          # This resolves the "Cannot sync to HEAD: auto-sync currently set to 0.1.0" error for OCI charts.
          kubectl patch application "${APP_NAME}" -n argocd --type='json' -p='[{"op": "replace", "path": "/spec/source/targetRevision", "value":"'"$NEW_CHART_VERSION"'"}]'

          echo "Triggering sync for ArgoCD application: ${APP_NAME}"
          # Now trigger a sync. It will use the targetRevision set in the previous step.
          argocd app sync "$APP_NAME" --prune  

          # Optional: Wait for the application to be healthy
          argocd app wait "$APP_NAME" --health --sync --timeout 300
      # --- END: Changes to reliably sync ArgoCD with OCI chart version ---
