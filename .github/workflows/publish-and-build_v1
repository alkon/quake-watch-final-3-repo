name: Publish and deploy the Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  build-and-publish:
    runs-on: self-hosted

    permissions:
      contents: read
      packages: write # Crucial for pushing Docker images and Helm charts to GHCR

    outputs:
      chart_name: ${{ steps.chart.outputs.name }}
      chart_version: ${{ steps.chart.outputs.version }}
      # Add output for Docker image tag if needed by other jobs
      image_tag: "latest" # Assuming 'latest' tag is always pushed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      # --- START: Updated Docker Image Build and Publish Steps using actions/ ---
      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5 # Using the recommended action
        with:
          context: . # Path to the build context, usually where your Dockerfile is.
                     # Assumes your Dockerfile is in the root of the repository.
                     # If it's in a subfolder (e.g., ./app), change to './app'
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/quake-watch-app:latest
          # Optional: Add caching for faster builds
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
      # --- END: Updated Docker Image Build and Publish Steps using actions/ ---

      - name: Extract Chart Metadata
        id: chart # IMPORTANT: This ID is used to reference outputs like steps.chart.outputs.name
        run: |
          # Find the *first* Chart.yaml in the ./helm/ directory structure.
          # Assuming Helm chart is in a sub-directory under 'helm/' like 'helm/quake-watch-app-chart/Chart.yaml'
          CHART_YAML_PATH=$(find ./helm -name Chart.yaml | head -n 1)
          
          if [ -z "$CHART_YAML_PATH" ]; then
            echo "Error: No Chart.yaml found in ./helm/ directory."
            exit 1
          fi
          
          # Extract version from Chart.yaml
          CHART_VERSION=$(grep '^version:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart version detected: $CHART_VERSION"
          echo "version=$CHART_VERSION" >> "$GITHUB_OUTPUT" # Output for current job steps and for job output
          echo "$CHART_VERSION" > chart-version.txt # For artifact upload
          
          # Extract name from Chart.yaml
          CHART_NAME=$(grep '^name:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart name detected: $CHART_NAME"
          echo "name=$CHART_NAME" >> "$GITHUB_OUTPUT" # Output for current job steps
          
          # Extract chart directory path (e.g., quake-watch-app-chart from helm/quake-watch-app-chart/Chart.yaml)
          CHART_DIRECTORY=$(dirname "$CHART_YAML_PATH" | xargs basename)
          echo "Chart directory name: $CHART_DIRECTORY"
          echo "chart_directory=$CHART_DIRECTORY" >> "$GITHUB_OUTPUT" # Output for current job steps

      - name: Upload Chart Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chart-version
          path: chart-version.txt

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.0

      - name: Package & Push Helm Chart to GHCR OCI
        run: |
          CHART_DIR="./helm/${{ steps.chart.outputs.chart_directory }}" 
          CHART_PACKAGE=$(helm package "$CHART_DIR" --destination . | awk '{print $NF}')
          echo "Packaged chart: $CHART_PACKAGE"
          GHCR_OCI_TARGET="oci://ghcr.io/${{ github.repository_owner }}/${{ steps.chart.outputs.name }}"
          echo "Pushing Helm chart to GHCR OCI Repository: $GHCR_OCI_TARGET"
          helm push "$CHART_PACKAGE" "$GHCR_OCI_TARGET" --debug
